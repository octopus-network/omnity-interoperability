type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainMeta = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type ChainWithSeq = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  latest_ticket_seq : opt nat64;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
  latest_dire_seq : opt nat64;
};
type Directive = variant {
  UpdateFee : Factor;
  AddToken : Token;
  AddChain : Chain;
  ToggleChainState : ToggleState;
};
type Error = variant {
  AlreadyExistingTicketId : text;
  MalformedMessageBytes;
  NotFoundChain : text;
  DeactiveChain : text;
  ChainAlreadyExisting : text;
  ResubmitTicketIdMustExist;
  ProposalError : text;
  ResubmitTicketMustSame;
  NotFoundAccountToken : record { text; text; text };
  NotSupportedProposal;
  SighWithEcdsaError : text;
  Unauthorized;
  TicketAmountParseError : record { text; text };
  NotFoundChainToken : record { text; text };
  TokenAlreadyExisting : text;
  ResubmitTicketSentTooOften;
  GenerateDirectiveError : text;
  EcdsaPublicKeyError : text;
  NotFoundToken : text;
  CustomError : text;
  NotSufficientTokens : record { text; text };
};
type Event = variant {
  toggled_chain_state : record { chain : ChainWithSeq; state : ToggleState };
  updated_fee : Factor;
  added_token_position : record { position : TokenKey; amount : nat };
  added_token : TokenMeta;
  post_upgrade : blob;
  init : InitArgs;
  received_directive : record { dst_chain : ChainWithSeq; dire : Directive };
  added_chain : ChainWithSeq;
  updated_token_position : record { position : TokenKey; amount : nat };
  updated_chain : ChainWithSeq;
  received_ticket : record { ticket : Ticket; dst_chain : ChainWithSeq };
  resubmit_ticket : record { ticket_id : text; timestamp : nat64 };
  pre_upgrade : blob;
};
type Factor = variant {
  UpdateFeeTokenFactor : FeeTokenFactor;
  UpdateTargetChainFactor : TargetChainFactor;
};
type FeeTokenFactor = record { fee_token : text; fee_token_factor : nat };
type GetEventsArg = record { start : nat64; length : nat64 };
type HubArg = variant { Init : InitArgs };
type InitArgs = record { admin : principal };
type Proposal = variant {
  UpdateFee : Factor;
  AddToken : TokenMeta;
  AddChain : Chain;
  ToggleChainState : ToggleState;
};
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : Chain; Err : Error };
type Result_10 = variant { Ok : vec record { nat64; Ticket }; Err : Error };
type Result_11 = variant { Ok : vec text; Err : Error };
type Result_2 = variant { Ok : vec TokenOnChain; Err : Error };
type Result_3 = variant { Ok : vec Chain; Err : Error };
type Result_4 = variant { Ok : vec record { text; text; nat }; Err : Error };
type Result_5 = variant { Ok : vec Token; Err : Error };
type Result_6 = variant { Ok : nat64; Err : Error };
type Result_7 = variant { Ok : Ticket; Err : Error };
type Result_8 = variant { Ok : vec Ticket; Err : Error };
type Result_9 = variant { Ok : vec record { nat64; Directive }; Err : Error };
type TargetChainFactor = record {
  target_chain_id : text;
  target_chain_factor : nat;
};
type Ticket = record {
  token : text;
  action : TxAction;
  dst_chain : text;
  memo : opt blob;
  ticket_id : text;
  sender : opt text;
  ticket_time : nat64;
  ticket_type : TicketType;
  src_chain : text;
  amount : text;
  receiver : text;
};
type TicketType = variant { Resubmit; Normal };
type ToggleAction = variant { Deactivate; Activate };
type ToggleState = record { action : ToggleAction; chain_id : text };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TokenKey = record { token_id : text; chain_id : text };
type TokenMeta = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  issue_chain : text;
  symbol : text;
  dst_chains : vec text;
};
type TokenOnChain = record { token_id : text; chain_id : text; amount : nat };
type Topic = variant {
  UpdateFee : opt text;
  ActivateChain;
  AddToken : opt text;
  DeactivateChain;
  AddChain : opt ChainType;
};
type TxAction = variant { Redeem; Transfer };
service : (HubArg) -> {
  execute_proposal : (vec Proposal) -> (Result);
  get_chain : (text) -> (Result_1) query;
  get_chain_tokens : (opt text, opt text, nat64, nat64) -> (Result_2) query;
  get_chains : (opt ChainType, opt ChainState, nat64, nat64) -> (
      Result_3,
    ) query;
  get_events : (GetEventsArg) -> (vec Event) query;
  get_fees : (opt text, opt text, nat64, nat64) -> (Result_4) query;
  get_logs : (opt nat64, nat64, nat64) -> (vec text) query;
  get_tokens : (opt text, opt text, nat64, nat64) -> (Result_5) query;
  get_total_tx : () -> (Result_6) query;
  get_tx : (text) -> (Result_7) query;
  get_txs : (
      opt text,
      opt text,
      opt text,
      opt record { nat64; nat64 },
      nat64,
      nat64,
    ) -> (Result_8) query;
  query_directives : (opt text, opt Topic, nat64, nat64) -> (Result_9) query;
  query_tickets : (opt text, nat64, nat64) -> (Result_10) query;
  resubmit_ticket : (Ticket) -> (Result);
  send_ticket : (Ticket) -> (Result);
  set_logger_filter : (text) -> ();
  update_fee : (vec Factor) -> (Result);
  validate_proposal : (vec Proposal) -> (Result_11) query;
}
