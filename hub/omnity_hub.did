type Action = variant { Redeem; Transfer };
type ChainInfo = record {
  seq : nat64;
  signature : opt vec nat8;
  chain_id : text;
  chain_state : Status;
  chain_name : text;
  chain_type : ChainType;
};
type ChainStatue = record {
  seq : nat64;
  signature : opt vec nat8;
  chain_id : text;
  chain_state : Status;
};
type ChainType = variant { SettlementChain; ExecutionChain };
type Directive = variant {
  UpdateFee : Fee;
  AddToken : TokenInfo;
  AddChain : ChainInfo;
  SetChainStatus : ChainStatue;
};
type Error = variant {
  MalformedMessageBytes;
  Unauthorized;
  CustomError : text;
};
type Fee = record {
  fee_token : text;
  signature : opt vec nat8;
  chain_id : text;
  fee_amount : nat64;
};
type LandingPass = record {
  token : text;
  signature : opt vec nat8;
  action : Action;
  src_chain_id : text;
  memo : opt vec nat8;
  dst_chain_id : text;
  nonce : nat64;
  timestamp : nat64;
  amount : nat64;
  trans_id : text;
  receiver : text;
};
type Network = variant { mainnet; local; testnet };
type PublicKeyReply = record { public_key : vec nat8 };
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : vec Directive; Err : Error };
type Result_2 = variant { Ok : vec LandingPass; Err : Error };
type Result_3 = variant { Ok : PublicKeyReply; Err : Error };
type Status = variant { Active; Reinstate; Suspend };
type TokenInfo = record {
  seq : nat64;
  signature : opt vec nat8;
  token_id : text;
  token_symbol : text;
  meta : opt nat8;
  chain_id : text;
};
service : () -> {
  generate_landing_pass : (record {}) -> (Result);
  get_directives : () -> (Result_1) query;
  get_landing_passes : () -> (Result_2) query;
  get_pub_key : (Network) -> (Result_3);
  set_owner : (principal) -> (Result);
  set_whilelist : (principal, bool) -> (Result);
  signe_directive : (Directive) -> (Result);
  update_fee : (Fee) -> (Result);
}
