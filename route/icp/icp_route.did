type Account = record { owner : principal; subaccount : opt blob };
type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type ChangeFeeCollector = variant { SetTo : Account; Unset };
type FeatureFlags = record { icrc2 : bool };
type GenerateTicketError = variant {
  InsufficientRedeemFee : record { provided : nat64; required : nat64 };
  SendTicketErr : text;
  TemporarilyUnavailable : text;
  InsufficientAllowance : record { allowance : nat64 };
  TransferFailure : text;
  UnsupportedAction : text;
  RedeemFeeNotSet;
  InvalidTicketAmount : nat;
  UnsupportedChainId : text;
  UnsupportedToken : text;
  InsufficientFunds : record { balance : nat; ledger_id : principal };
};
type GenerateTicketOk = record { ticket_id : text };
type GenerateTicketReq = record {
  action : TxAction;
  token_id : text;
  from_subaccount : opt blob;
  target_chain_id : text;
  amount : nat;
  receiver : text;
};
type IcpChainKeyToken = variant { CKBTC };
type InitArgs = record {
  hub_principal : principal;
  chain_id : text;
  chain_state : ChainState;
};
type MetadataValue = variant { Int : int; Nat : nat; Blob : blob; Text : text };
type MintTokenStatus = variant {
  Finalized : record { block_index : nat64 };
  Unknown;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : GenerateTicketOk; Err : GenerateTicketError };
type Result_2 = variant { Ok; Err : GenerateTicketError };
type RouteArg = variant { Upgrade : opt UpgradeArgs_1; Init : InitArgs };
type RouteState = record {
  hub_principal : principal;
  is_timer_running : bool;
  next_directive_seq : nat64;
  finalized_mint_token_requests : vec record { text; nat64 };
  token_ledgers : vec record { text; principal };
  chain_id : text;
  tokens : vec record { text; Token };
  target_chain_factor : vec record { text; nat };
  counterparties : vec record { text; Chain };
  next_ticket_seq : nat64;
  chain_state : ChainState;
  failed_tickets : vec Ticket;
  fee_token_factor : opt nat;
};
type Ticket = record {
  token : text;
  action : TxAction;
  dst_chain : text;
  memo : opt blob;
  ticket_id : text;
  sender : opt text;
  ticket_time : nat64;
  ticket_type : TicketType;
  src_chain : text;
  amount : text;
  receiver : text;
};
type TicketType = variant { Resubmit; Normal };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TokenResp = record {
  "principal" : opt principal;
  decimals : nat8;
  token_id : text;
  icon : opt text;
  rune_id : opt text;
  symbol : text;
};
type TxAction = variant {
  Burn;
  Redeem;
  Mint;
  RedeemIcpChainKeyAssets : IcpChainKeyToken;
  Transfer;
};
type UpgradeArgs = record {
  token_symbol : opt text;
  transfer_fee : opt nat;
  metadata : opt vec record { text; MetadataValue };
  maximum_number_of_accounts : opt nat64;
  accounts_overflow_trim_quantity : opt nat64;
  change_fee_collector : opt ChangeFeeCollector;
  max_memo_length : opt nat16;
  token_name : opt text;
  feature_flags : opt FeatureFlags;
};
type UpgradeArgs_1 = record {
  hub_principal : opt principal;
  chain_id : opt text;
  chain_state : opt ChainState;
};
service : (RouteArg) -> {
  collect_ledger_fee : (principal, opt nat, Account) -> (Result);
  generate_ticket : (GenerateTicketReq) -> (Result_1);
  generate_ticket_v2 : (GenerateTicketReq) -> (Result_1);
  get_chain_list : () -> (vec Chain) query;
  get_fee_account : (opt principal) -> (blob) query;
  get_readable_fee_account : (opt principal) -> (text) query;
  get_redeem_fee : (text) -> (opt nat64) query;
  get_route_state : () -> (RouteState) query;
  get_token_ledger : (text) -> (opt principal) query;
  get_token_list : () -> (vec TokenResp) query;
  mint_token_status : (text) -> (MintTokenStatus) query;
  query_failed_tickets : () -> (vec Ticket) query;
  remove_controller : (principal, principal) -> (Result);
  resend_tickets : () -> (Result_2);
  update_icrc_ledger : (principal, UpgradeArgs) -> (Result);
}
