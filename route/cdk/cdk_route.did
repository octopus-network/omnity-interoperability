type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type EcdsaCurve = variant { secp256k1 };
type EcdsaKeyId = record { name : text; curve : EcdsaCurve };
type HttpHeader = record { value : text; name : text };
type InitArgs = record {
  evm_chain_id : nat64;
  admin : principal;
  omnity_port_contract : text;
  hub_principal : principal;
  network : Network;
  chain_id : text;
  rpc_url : text;
  evm_rpc_canister_addr : principal;
  scan_start_height : nat64;
};
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type Network = variant { mainnet; local; testnet };
type RpcApi = record { url : text; headers : opt vec HttpHeader };
type ShowStruct = record { raw : text; seq : nat64; data : text };
type StateProfile = record {
  next_consume_ticket_seq : nat64;
  evm_chain_id : nat64;
  tickets : vec record { nat64; Ticket };
  admin : principal;
  omnity_port_contract : vec nat8;
  next_consume_directive_seq : nat64;
  hub_principal : principal;
  key_id : EcdsaKeyId;
  next_directive_seq : nat64;
  finalized_mint_token_requests : vec record { text; nat64 };
  pubkey : vec nat8;
  key_derivation_path : vec vec nat8;
  omnity_chain_id : text;
  tokens : vec record { text; Token };
  nonce : nat64;
  evm_rpc_addr : principal;
  counterparties : vec record { text; Chain };
  next_ticket_seq : nat64;
  rpc_providers : vec RpcApi;
  chain_state : ChainState;
};
type Ticket = record {
  token : text;
  action : TxAction;
  dst_chain : text;
  memo : opt vec nat8;
  ticket_id : text;
  sender : opt text;
  ticket_time : nat64;
  ticket_type : TicketType;
  src_chain : text;
  amount : text;
  receiver : text;
};
type TicketType = variant { Resubmit; Normal };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TxAction = variant { Redeem; Transfer };
service : (InitArgs) -> {
  init_chain_pubkey : () -> (text);
  pubkey_and_evm_addr : () -> (text, text) query;
  route_state : () -> (StateProfile) query;
  test_getLogins : (nat64, nat64) -> (vec LogEntry);
  test_get_finalized_height : () -> (nat64);
  test_send_ticket : (vec record { nat64; Ticket }) -> ();
  test_to_cdk_ticket : () -> (vec ShowStruct);
}
