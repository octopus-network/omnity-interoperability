type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type CustomsState = record {
  ckbtc_ledger_principal : principal;
  hub_principal : principal;
  is_timer_running : bool;
  next_directive_seq : nat64;
  icp_token_id : opt text;
  chain_id : text;
  next_ticket_seq : nat64;
  ckbtc_token_id : opt text;
};
type GenerateTicketError = variant {
  SendTicketErr : text;
  TemporarilyUnavailable : text;
  InsufficientIcp : record { provided : nat64; required : nat64 };
  InsufficientAllowance : record { allowance : nat64 };
  TransferIcpFailure : text;
  UnsupportedChainId : text;
  UnsupportedToken : text;
  InsufficientFunds : record { balance : nat64 };
};
type GenerateTicketOk = record { ticket_id : text };
type GenerateTicketReq = record {
  token_id : text;
  from_subaccount : opt blob;
  target_chain_id : text;
  amount : nat;
  receiver : text;
};
type InitArgs = record {
  ckbtc_ledger_principal : principal;
  hub_principal : principal;
  chain_id : text;
};
type Result = variant { Ok : GenerateTicketOk; Err : GenerateTicketError };
type Ticket = record {
  token : text;
  action : TxAction;
  dst_chain : text;
  memo : opt blob;
  ticket_id : text;
  sender : opt text;
  ticket_time : nat64;
  ticket_type : TicketType;
  src_chain : text;
  amount : text;
  receiver : text;
};
type TicketType = variant { Resubmit; Normal };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TxAction = variant { Burn; Redeem; Mint; Transfer };
service : (InitArgs) -> {
  generate_ticket : (GenerateTicketReq) -> (Result);
  get_account_identifier : (principal) -> (blob) query;
  get_chain_list : () -> (vec Chain) query;
  get_state : () -> (CustomsState) query;
  get_token_list : () -> (vec Token) query;
  handle_ticket : (nat64) -> ();
  query_hub_tickets : (nat64, nat64) -> (vec record { nat64; Ticket });
  set_ckbtc_token : (text) -> ();
  set_icp_token : (text) -> ();
  ticket_finallized : (text) -> (opt nat64) query;
}
