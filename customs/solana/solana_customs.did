type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type CustomArg = variant { Upgrade : opt UpgradeArgs; Init : InitArgs };
type GenTicketStatus = variant { Finalized : GenerateTicketArgs; Unknown };
type GenerateTicketArgs = record {
  signature : text;
  token_id : text;
  target_chain_id : text;
  amount : nat64;
  receiver : text;
};
type GenerateTicketError = variant {
  SendTicketErr : text;
  RpcError : text;
  TemporarilyUnavailable : text;
  AlreadyProcessed;
  DecodeTxError : text;
  MismatchWithGenTicketReq;
  UnsupportedChainId : text;
  UnsupportedToken : text;
};
type InitArgs = record {
  hub_principal : principal;
  rpc_list : vec text;
  sol_canister : principal;
  chain_id : text;
  port_program_id : text;
  schnorr_key_name : text;
  proxy_rpc : text;
  chain_state : ChainState;
  forward : opt text;
  min_response_count : nat32;
};
type ReleaseTokenStatus = variant {
  Finalized : text;
  Unknown;
  Submitted : text;
  Pending;
};
type Result = variant { Ok; Err : GenerateTicketError };
type Result_1 = variant { Ok; Err : text };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type UpgradeArgs = record {
  hub_principal : opt principal;
  sol_canister : opt principal;
  chain_id : opt text;
  schnorr_key_name : opt text;
  chain_state : opt ChainState;
};
service : (CustomArg) -> {
  generate_ticket : (GenerateTicketArgs) -> (Result);
  generate_ticket_status : (text) -> (GenTicketStatus) query;
  get_chain_list : () -> (vec Chain) query;
  get_payer_address : () -> (text);
  get_token_list : () -> (vec Token) query;
  release_token_status : (text) -> (ReleaseTokenStatus) query;
  resubmit_release_token_tx : (text) -> (Result_1);
}
