type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type ECDSAPublicKey = record { public_key : blob; chain_code : blob };
type GenerateTicketArgs = record {
  token_id : text;
  txid : text;
  target_chain_id : text;
  amount : text;
  receiver : text;
};
type IcpChainKeyToken = variant { CKBTC };
type InitArgs = record {
  hub_principal : principal;
  network : Network_1;
  chain_id : text;
  admins : vec principal;
  indexer_principal : principal;
};
type LockTicketRequest = record {
  received_at : nat64;
  ticker : text;
  token_id : text;
  txid : blob;
  target_chain_id : text;
  amount : text;
  receiver : text;
};
type Network = variant { mainnet; regtest; testnet };
type Network_1 = variant { mainnet; local; testnet };
type ReleaseTokenStatus = variant {
  Signing;
  Confirmed : text;
  Sending : text;
  Unknown;
  Submitted : text;
  Pending;
};
type StateProfile = record {
  next_consume_ticket_seq : nat64;
  pending_gen_ticket_requests : vec record { blob; LockTicketRequest };
  next_consume_directive_seq : nat64;
  hub_principal : principal;
  ecdsa_key_name : text;
  deposit_addr : opt text;
  next_directive_seq : nat64;
  finalized_mint_token_requests : vec record { text; text };
  ecdsa_public_key : opt ECDSAPublicKey;
  chain_id : text;
  tokens : vec record { text; Token };
  btc_network : Network;
  admins : vec principal;
  finalized_gen_ticket_requests : vec record { blob; LockTicketRequest };
  counterparties : vec record { text; Chain };
  next_ticket_seq : nat64;
  chain_state : ChainState;
  min_confirmations : nat8;
  indexer_principal : principal;
  deposit_pubkey : opt text;
};
type Ticket = record {
  token : text;
  action : TxAction;
  dst_chain : text;
  memo : opt blob;
  ticket_id : text;
  sender : opt text;
  ticket_time : nat64;
  ticket_type : TicketType;
  src_chain : text;
  amount : text;
  receiver : text;
};
type TicketType = variant { Resubmit; Normal };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TxAction = variant {
  Burn;
  Redeem;
  Mint;
  RedeemIcpChainKeyAssets : IcpChainKeyToken;
  Transfer;
};
service : (InitArgs) -> {
  brc20_state : () -> (StateProfile) query;
  finalized_unlock_tickets : (nat64) -> (text) query;
  generate_deposit_addr : () -> (opt text, opt text);
  generate_ticket : (GenerateTicketArgs) -> ();
  pending_unlock_tickets : (nat64) -> (text) query;
  release_token_status : (text) -> (ReleaseTokenStatus) query;
  resend_unlock_ticket : (nat64) -> (text);
  test_create_tx : (Ticket, nat64) -> ();
  test_update_main_addr : (text) -> ();
  test_update_utxos : () -> (text);
}
