type BitcoinAddress = variant {
  OpReturn : blob;
  p2wsh_v0 : blob;
  p2tr_v1 : blob;
  p2sh : blob;
  p2wpkh_v0 : blob;
  p2pkh : blob;
};
type BtcChangeOutput = record { value : nat64; vout : nat32 };
type BtcNetwork = variant { Mainnet; Regtest; Testnet };
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type Chain = record {
  fee_token : opt text;
  canister_id : text;
  chain_id : text;
  counterparties : opt vec text;
  chain_state : ChainState;
  chain_type : ChainType;
  contract_address : opt text;
};
type ChainState = variant { Active; Deactive };
type ChainType = variant { SettlementChain; ExecutionChain };
type CustomArg = variant { Upgrade : opt UpgradeArgs; Init : InitArgs };
type CustomsInfo = record {
  chain_state : ChainState;
  min_confirmations : nat32;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type Destination = record {
  token : opt text;
  target_chain_id : text;
  receiver : text;
};
type EstimateFeeArgs = record { amount : opt nat; rune_id : RuneId };
type Event = variant {
  received_utxos : record {
    is_runes : bool;
    destination : Destination;
    utxos : vec Utxo;
  };
  sent_transaction : record {
    fee : opt nat64;
    txid : blob;
    btc_change_output : BtcChangeOutput;
    btc_utxos : vec Utxo;
    requests : vec text;
    runes_change_output : RunesChangeOutput;
    runes_utxos : vec RunesUtxo;
    rune_id : RuneId;
    submitted_at : nat64;
  };
  added_token : record { token : Token; rune_id : RuneId };
  finalized_ticket_request : record {
    txid : blob;
    balances : vec RunesBalance;
  };
  accepted_release_token_request : ReleaseTokenRequest;
  init : InitArgs;
  updated_runes_balance : record { balance : RunesBalance; txid : blob };
  upgrade : UpgradeArgs;
  added_chain : Chain;
  update_next_ticket_seq : nat64;
  update_next_directive_seq : nat64;
  confirmed_transaction : record { txid : blob };
  replaced_transaction : record {
    fee : nat64;
    btc_change_output : BtcChangeOutput;
    old_txid : blob;
    new_txid : blob;
    runes_change_output : RunesChangeOutput;
    submitted_at : nat64;
  };
  accepted_generate_ticket_request : GenTicketRequest;
  toggle_chain_state : ToggleState;
};
type GenTicketRequest = record {
  received_at : nat64;
  token_id : text;
  txid : blob;
  target_chain_id : text;
  address : text;
  amount : nat;
  receiver : text;
  rune_id : RuneId;
};
type GenTicketStatus = variant {
  Invalid;
  Finalized;
  Unknown;
  Pending : GenTicketRequest;
};
type GenerateTicketArgs = record {
  txid : text;
  target_chain_id : text;
  amount : nat;
  receiver : text;
  rune_id : text;
};
type GenerateTicketError = variant {
  TemporarilyUnavailable : text;
  InvalidRuneId : text;
  AlreadySubmitted;
  InvalidTxId;
  AleardyProcessed;
  NoNewUtxos;
  UnsupportedChainId : text;
  UnsupportedToken : text;
};
type GetBtcAddressArgs = record { target_chain_id : text; receiver : text };
type GetEventsArg = record { start : nat64; length : nat64 };
type GetGenTicketReqsArgs = record { max_count : nat64; start_txid : opt blob };
type InitArgs = record {
  hub_principal : principal;
  ecdsa_key_name : text;
  runes_oracle_principal : principal;
  max_time_in_queue_nanos : nat64;
  chain_id : text;
  btc_network : BtcNetwork;
  chain_state : ChainState;
  min_confirmations : opt nat32;
};
type OutPoint = record { txid : blob; vout : nat32 };
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type RedeemFee = record { bitcoin_fee : nat64 };
type ReleaseTokenRequest = record {
  received_at : nat64;
  ticket_id : text;
  address : BitcoinAddress;
  amount : nat;
  rune_id : RuneId;
};
type ReleaseTokenStatus = variant {
  Signing;
  Confirmed : blob;
  Sending : blob;
  Unknown;
  Submitted : blob;
  Pending;
};
type Result = variant { Ok; Err : GenerateTicketError };
type Result_1 = variant { Ok : vec Utxo; Err : UpdateBtcUtxosErr };
type Result_2 = variant { Ok; Err : UpdateRunesBalanceError };
type RuneId = record { tx : nat32; block : nat64 };
type RunesBalance = record { vout : nat32; amount : nat; rune_id : RuneId };
type RunesChangeOutput = record { value : nat; vout : nat32; rune_id : RuneId };
type RunesUtxo = record { raw : Utxo; runes : RunesBalance };
type ToggleAction = variant { Deactivate; Activate };
type ToggleState = record { action : ToggleAction; chain_id : text };
type Token = record {
  decimals : nat8;
  token_id : text;
  metadata : vec record { text; text };
  icon : opt text;
  name : text;
  symbol : text;
};
type TokenResp = record {
  decimals : nat8;
  token_id : text;
  icon : opt text;
  rune_id : text;
  symbol : text;
};
type UpdateBtcUtxosErr = variant { TemporarilyUnavailable : text };
type UpdateRunesBalanceArgs = record {
  txid : blob;
  balances : vec RunesBalance;
};
type UpdateRunesBalanceError = variant {
  SendTicketErr : text;
  UtxoNotFound;
  RequestNotFound;
  AleardyProcessed;
  MismatchWithGenTicketReq;
};
type UpgradeArgs = record {
  hub_principal : opt principal;
  runes_oracle_principal : opt principal;
  max_time_in_queue_nanos : opt nat64;
  chain_state : opt ChainState;
  min_confirmations : opt nat32;
};
type Utxo = record { height : nat32; value : nat64; outpoint : OutPoint };
service : (CustomArg) -> {
  estimate_redeem_fee : (EstimateFeeArgs) -> (RedeemFee) query;
  generate_ticket : (GenerateTicketArgs) -> (Result);
  generate_ticket_status : (text) -> (GenTicketStatus) query;
  get_btc_address : (GetBtcAddressArgs) -> (text);
  get_canister_status : () -> (CanisterStatusResponse);
  get_chain_list : () -> (vec Chain) query;
  get_customs_info : () -> (CustomsInfo) query;
  get_events : (GetEventsArg) -> (vec Event) query;
  get_main_btc_address : (text) -> (text);
  get_pending_gen_ticket_requests : (GetGenTicketReqsArgs) -> (
      vec GenTicketRequest,
    ) query;
  get_token_list : () -> (vec TokenResp) query;
  release_token_status : (text) -> (ReleaseTokenStatus) query;
  update_btc_utxos : () -> (Result_1);
  update_runes_balance : (UpdateRunesBalanceArgs) -> (Result_2);
}
